[build-system]
requires = [
    "setuptools >= 40.0",
]
build-backend = "setuptools.build_meta"



[tool.ruff]
target-version = "py38"
# Enable Pyflakes `E` and `F` codes by default.
lint.select = [
    "E",
    "W", # see: https://pypi.org/project/pycodestyle
    "F", # see: https://pypi.org/project/pyflakes
    "I", #see: https://pypi.org/project/isort/
#    "D", # see: https://pypi.org/project/pydocstyle
#    "N", # see: https://pypi.org/project/pep8-naming
#    "S", # see: https://pypi.org/project/flake8-bandit
]
#lint.extend-select = [
#    "A",    # see: https://pypi.org/project/flake8-builtins
#    "B",    # see: https://pypi.org/project/flake8-bugbear
#    "C4",   # see: https://pypi.org/project/flake8-comprehensions
#    "PT",   # see: https://pypi.org/project/flake8-pytest-style
#    "RET",  # see: https://pypi.org/project/flake8-return
#    "SIM",  # see: https://pypi.org/project/flake8-simplify
#    "YTT",  # see: https://pypi.org/project/flake8-2020
#    "ANN",  # see: https://pypi.org/project/flake8-annotations
#    "TID",  # see: https://pypi.org/project/flake8-tidy-imports/
#    "T10",  # see: https://pypi.org/project/flake8-debugger
#    "Q",    # see: https://pypi.org/project/flake8-quotes
#    "RUF",  # Ruff-specific rules
#    "EXE",  # see: https://pypi.org/project/flake8-executable
#    "ISC",  # see: https://pypi.org/project/flake8-implicit-str-concat
#    "PIE",  # see: https://pypi.org/project/flake8-pie
#    "PLE",  # see: https://pypi.org/project/pylint/
#    "PERF", # see: https://pypi.org/project/perflint/
#    "PYI",  # see: https://pypi.org/project/flake8-pyi/
#]
#lint.ignore = [
#    "E731",   # Do not assign a lambda expression, use a def
#    "D100",   # todo: Missing docstring in public module
#    "D104",   # todo: Missing docstring in public package
#    "D107",   # Missing docstring in `__init__`
#    "ANN101", # Missing type annotation for `self` in method
#    "S301",   # todo: `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue  # todo
#    "S310",   # todo: Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.  # todo
#    "B905",   # todo: `zip()` without an explicit `strict=` parameter
#]
lint.ignore-init-module-imports = true
lint.unfixable = ["F401"]

#[tool.ruff.lint.per-file-ignores]
#"setup.py" = ["ANN202", "ANN401"]
#"src/**" = ["ANN401"]
#"tests/**" = ["S101", "ANN001", "ANN201", "ANN202", "ANN401"]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

#[tool.ruff.pycodestyle]
#ignore-overlong-task-comments = true

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
